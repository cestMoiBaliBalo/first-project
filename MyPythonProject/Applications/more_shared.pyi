from pathlib import Path
from typing import Callable, Dict, Iterable, Iterator, List, Mapping, Optional, Set, Tuple


class AudioMetaData(Mapping):
    def __init__(self, path: Path) -> None:
        self._path: Path = ...
        self._name: str = ...
        self._extension: str = ...
        self._collection: Dict[str, str] = ...
    def get(self, key) -> Optional[str]: ...
    def items(self): ...
    def keys(self): ...
    def values(self): ...
    def __getitem__(self, item) -> str: ...
    def __iter__(self) -> Iterator[Tuple[str, str]]: ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    @classmethod
    def fromdirectory(cls, path: Path, *, excluded: Optional[Callable[[Path, Iterable[str]], Set[Path]]] = ...) -> Iterator[List[Tuple[str, str]]]: ...
    @property
    def name(self) -> str: ...
    @property
    def extension(self) -> str: ...
    @property
    def path(self) -> Path: ...


class APEv2Tag(AudioMetaData):
    def __init__(self, path: Path) -> None: ...


class ID3v2Tag(AudioMetaData):
    def __init__(self, path: Path) -> None: ...
    @staticmethod
    def _get_frame(frame_id: str) -> Optional[str]: ...


class VorbisComment(AudioMetaData):
    def __init__(self, path: Path) -> None: ...
