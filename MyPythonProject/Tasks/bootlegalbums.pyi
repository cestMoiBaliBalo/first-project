import argparse
from pathlib import Path
from typing import Any, Iterator, List, NamedTuple, Sized, Tuple, Union

Bootlegs = NamedTuple("Bootlegs", [("bootleg", str), ("artist", str), ("year", str), ("in_collection", str), ("provider", str)])
parser: Any = ...


class Files(object):
    def __init__(self, path: Union[Path, str], *included: str) -> None:
        self._collection: Iterator[Path] = ...
    def __iter__(self): ...
    def __next__(self): ...


class AudioFLACMetaData(object):
    def __init__(self, path: Union[Path, str]) -> None:
        self._collection: Iterator[Tuple[Union[Path, list], ...]] = ...
    def __iter__(self): ...
    def __next__(self): ...


class Formatter(object):
    GAP: int = ...
    SEP: str = ...
    def __init__(self, *iterables: Bootlegs) -> None:
        self._iterables: Tuple[Bootlegs, ...] = ...
        self._width_artists: int = ...
        self._width_bootlegs: int = ...
        self._width_providers: int = ...
        self._width_years: int = ...
        self.delimiters: str = ...
        self.headers: str = ...
    def __call__(self) -> Iterator[str]: ...
    @staticmethod
    def get_width(*items: str) -> int: ...
    @staticmethod
    def justify(item: str, width: int, *, justify: str = ...) -> str: ...


class GetPath(argparse.Action):
    def __init__(self, option_strings, dest, **kwargs): ...
    def __call__(self, parsobj, namespace, values, option_string=...): ...
